#!/bin/bash

# Script de validaci√≥ per al sistema DBM Pump Control
# Verifica que tots els components estiguin correctament configurats

echo "üîç Validant configuraci√≥ del sistema DBM Pump Control..."
echo "=================================================="

# Verificar Node.js
echo -n "Node.js: "
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo "‚úÖ Instal¬∑lat ($NODE_VERSION)"
else
    echo "‚ùå No trobat - Cal instal¬∑lar Node.js"
    exit 1
fi

# Verificar npm
echo -n "npm: "
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    echo "‚úÖ Instal¬∑lat ($NPM_VERSION)"
else
    echo "‚ùå No trobat - Cal instal¬∑lar npm"
    exit 1
fi

# Verificar Node-RED
echo -n "Node-RED: "
if command -v node-red &> /dev/null; then
    NODERED_VERSION=$(node-red --version 2>/dev/null | head -1)
    echo "‚úÖ Instal¬∑lat ($NODERED_VERSION)"
else
    echo "‚ùå No trobat - Cal instal¬∑lar Node-RED"
    exit 1
fi

# Verificar fitxers del projecte
echo -n "flows.json: "
if [ -f "flows.json" ]; then
    FLOW_SIZE=$(wc -c < flows.json)
    echo "‚úÖ Trobat (${FLOW_SIZE} bytes)"
else
    echo "‚ùå No trobat"
    exit 1
fi

echo -n "config-parametres-logica.json: "
if [ -f "config-parametres-logica.json" ]; then
    echo "‚úÖ Trobat"
    # Validar JSON
    if jq empty config-parametres-logica.json 2>/dev/null; then
        echo "   ‚úÖ JSON v√†lid"
    else
        echo "   ‚ö†Ô∏è  JSON pot tenir errors de sintaxi"
    fi
else
    echo "‚ùå No trobat"
    exit 1
fi

echo -n "historic-maniobres.csv: "
if [ -f "historic-maniobres.csv" ]; then
    LINES=$(wc -l < historic-maniobres.csv)
    echo "‚úÖ Trobat ($LINES l√≠nies)"
else
    echo "‚ùå No trobat"
    exit 1
fi

echo -n "package.json: "
if [ -f "package.json" ]; then
    echo "‚úÖ Trobat"
else
    echo "‚ùå No trobat"
    exit 1
fi

# Verificar depend√®ncies
echo ""
echo "üì¶ Verificant depend√®ncies..."
if [ -f "package.json" ]; then
    if [ -d "node_modules" ]; then
        echo "‚úÖ node_modules present"
    else
        echo "‚ö†Ô∏è  node_modules no trobat - Executeu 'npm install'"
    fi
else
    echo "‚ùå package.json no trobat"
fi

# Verificar GPIO (nom√©s a Raspberry Pi)
echo ""
echo "üîå Verificant GPIO..."
if [ -d "/sys/class/gpio" ]; then
    echo "‚úÖ Sistema GPIO disponible"
    
    # Verificar pins espec√≠fics
    for pin in 5 6; do
        if [ -d "/sys/class/gpio/gpio${pin}" ]; then
            echo "   ‚úÖ GPIO${pin} configurat"
        else
            echo "   ‚ö†Ô∏è  GPIO${pin} no configurat (es configurar√† autom√†ticament)"
        fi
    done
else
    echo "‚ö†Ô∏è  Sistema GPIO no disponible (normal si no √©s una Raspberry Pi)"
fi

# Verificar connectivitat MQTT (opcional)
echo ""
echo "üì° Verificant configuraci√≥ MQTT..."
MQTT_HOST=$(jq -r '.mqtt.broker_host // "cerbo-gx.local"' config-parametres-logica.json 2>/dev/null)
if command -v ping &> /dev/null; then
    if ping -c 1 "$MQTT_HOST" &> /dev/null; then
        echo "‚úÖ Host MQTT ($MQTT_HOST) accessible"
    else
        echo "‚ö†Ô∏è  Host MQTT ($MQTT_HOST) no accessible - Verificar configuraci√≥ de xarxa"
    fi
else
    echo "‚ö†Ô∏è  No es pot verificar connectivitat MQTT (ping no disponible)"
fi

echo ""
echo "üöÄ Instruccions per executar:"
echo "   node-red flows.json"
echo ""
echo "üìä Dashboard disponible a:"
echo "   http://$(hostname -I | awk '{print $1}'):1880/ui"
echo ""
echo "=================================================="

# Resum final
ERRORS=0
if ! command -v node-red &> /dev/null; then
    ((ERRORS++))
fi
if [ ! -f "flows.json" ]; then
    ((ERRORS++))
fi
if [ ! -f "config-parametres-logica.json" ]; then
    ((ERRORS++))
fi

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ Sistema validat correctament!"
    exit 0
else
    echo "‚ùå S'han trobat $ERRORS errors. Reviseu la configuraci√≥."
    exit 1
fi